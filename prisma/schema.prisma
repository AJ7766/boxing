generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Metadata {
  id            Int       @id @default(1) // Always a single row
  lastFetchedAt DateTime?
}

model Title {
  id     String  @id
  name   String
  fights Fight[] @relation("FightTitles")
}

model MensRankings {
  id                 String  @id
  boxer              String?
  record             String?
  weightClass        String?
  currentWorldTitles String?
  theRing            String?
  bwaa               String?
  tbrb               String?
  espn               String?
  boxRec             String?
}

model WomensRankings {
  id                 String  @id
  boxer              String?
  record             String?
  weightClass        String?
  currentWorldTitles String?
  theRing            String?
  espn               String?
  boxRec             String?
}

model Fighter {
  id            String  @id
  name          String?
  age           Int?
  gender        String?
  height        String?
  nationality   String?
  nickname      String?
  reach         String?
  stance        String?
  wins          Int?
  losses        Int?
  draws         Int?
  total_bouts   Int?
  total_rounds  Int?
  ko_percentage Int?
  ko_wins       Int?
  stopped       Int?
  debut         String?
  division      String?
  divisionSlug  String?
  weightLb      Float?
  weightKg      Float?
  titleNames    Json?

  // Relationships
  fightsAsFighter1 Fight[] @relation("Fighter1Relation")
  fightsAsFighter2 Fight[] @relation("Fighter2Relation")
}

model Fight {
  id              String    @id
  title           String?
  date            DateTime?
  location        String?
  scheduledRounds Int?
  broadcasters    Json?
  result          Json?
  scores          String[]
  status          String?
  division        String?

  // Foreign Keys
  fighter1Id String?
  fighter2Id String?

  // Relations
  titles   Title[]  @relation("FightTitles") // Many-to-many relation
  fighter1 Fighter? @relation("Fighter1Relation", fields: [fighter1Id], references: [id]) // One to-many relation
  fighter2 Fighter? @relation("Fighter2Relation", fields: [fighter2Id], references: [id])
}
